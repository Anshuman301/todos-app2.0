{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","utils/theme.utils.js","component/FolderItem.jsx","component/TodoListFolder.jsx","component/TableContent.jsx","component/InputTodo.jsx","component/TodoContent.jsx","routes/TodosApp.jsx","index.js"],"names":["keyframes","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","pxToRem","px","folderState","atom","key","default","FolderItem","name","useRecoilState","folder","setFolderState","bg","borderRadius","cursor","_hover","onClick","pl","TodoListFolder","React","useState","listFolder","setListFolder","folderName","setFolderName","handleSubmit","e","preventDefault","trim","prevFolder","direction","onSubmit","as","align","justify","ml","variant","value","placeholder","size","w","onChange","target","color","_active","h","length","textDecoration","mt","p","map","item","idx","editTodoState","undefined","TableContent","props","id","todo","createdAt","isCompleted","isChecked","setCheck","folderTodoListState","folderTodoList","setFolderTodoList","setEditTodoState","checked","isNumeric","insetInline","mr","data","slice","todoListState","selector","get","set","newValue","todoList","InputTodo","useRecoilValue","editTodo","setEditTodo","input","setInput","inputRef","useRef","console","log","useEffect","isNaN","current","focus","Date","toLocaleDateString","toLocaleTimeString","isDisabled","_focus","ref","children","TodoContent","isCheckList","setCheckList","Array","from","isAllChecked","every","Boolean","isIndeterminate","some","handleCheck","isCheck","prevCheckList","text","m","wrap","alignSelf","mb","ele","borderBottom","rest","TodosApp","height","overflow","bgGradient","pos","top","bgClip","flex","shadow","ReactDOM","render","StrictMode","path","element","document","getElementById"],"mappings":"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","file":"static/js/main.25b3a2c7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\r\nimport './App.css';\r\nimport { Box, Flex, Image, keyframes, Link, Text, usePrefersReducedMotion } from '@chakra-ui/react';\r\nconst spin = keyframes`\r\nfrom {transform: rotate(0deg);}\r\nto {transform: rotate(360deg);}\r\n`\r\nfunction App() {\r\n  const preferedReducedMotion = usePrefersReducedMotion();\r\n  const animation = preferedReducedMotion ? undefined : `${spin} infinite 20s linear`\r\n  return (\r\n    <Box w='100%' >\r\n      <Flex backgroundColor={'#282c34'} \r\n      minHeight={'100vh'} \r\n      direction={'column'} \r\n      align={'center'} \r\n      justify={'center'} \r\n      color='white' \r\n      fontSize= {'2xl'}\r\n      >\r\n        <Image animation={animation} height={'40vmin'}\r\n        src={logo} className=\"App-logo\" alt=\"logo\" pointerEvents={'none'}\r\n        />\r\n        <Text>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </Text>\r\n        <Link\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n          color={'#61dafb'}\r\n        >\r\n          Learn React\r\n        </Link>\r\n      </Flex>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","export const pxToRem = (px) => {\r\n    const remValue = (px * 100)/(1080 + 1024 + 512)\r\n    return `${remValue}rem`\r\n}","import { ListItem, Text } from \"@chakra-ui/react\";\r\nimport { atom, useRecoilState } from \"recoil\";\r\nimport { pxToRem } from \"../utils/theme.utils\";\r\n\r\nexport const folderState = atom({\r\n  key: \"folderState\",\r\n  default: \"\"\r\n});\r\n\r\nexport default function FolderItem({ name }) {\r\n  const [folder, setFolderState] = useRecoilState(folderState);\r\n\r\n  return (\r\n    <ListItem\r\n      bg={folder === name ? \"orange.200\" : \"\"}\r\n      borderRadius={pxToRem(5)}\r\n      cursor={\"pointer\"}\r\n      _hover={{ bg: folder !== name ? \"orange.200\" : \"\" }}\r\n      onClick={() => {\r\n        setFolderState(name);\r\n      }}\r\n    >\r\n      <Text pl={pxToRem(15)}>{name}</Text>\r\n    </ListItem>\r\n  );\r\n}\r\n","import { AddIcon } from \"@chakra-ui/icons\";\r\nimport { Box, Circle, Flex, FormControl, Input, List, Stack, Text } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { pxToRem } from \"../utils/theme.utils\";\r\nimport FolderItem, { folderState } from \"./FolderItem\";\r\n\r\nexport default function TodoListFolder() {\r\n    const [listFolder, setListFolder] = React.useState([]);\r\n    const [folderName,setFolderName] = React.useState('');\r\n    const [, setFolderState] = useRecoilState(folderState);\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if(!folderName.trim())\r\n            return; \r\n        setListFolder(prevFolder => [...prevFolder, folderName]);\r\n        setFolderName('');\r\n        setFolderState(folderName)\r\n    }\r\n    const handleChange = (e) => {\r\n        setFolderName(e.target.value);\r\n    }\r\n    return (\r\n        <Flex direction={\"column\"}>\r\n            <FormControl onSubmit={handleSubmit} as='form'>\r\n                <Stack direction={\"row\"} align={\"end\"} justify={\"space-evenly\"} ml={pxToRem(20)}>\r\n                    <Input variant='flushed' value={folderName} placeholder='Enter todo folder name...' size={'xs'} w={pxToRem(200)} onChange={handleChange}  />\r\n                    <Circle size={pxToRem(30)} bg={\"orange\"} color={\"white\"} cursor={\"pointer\"} _hover={{bg: 'orange.300'}}\r\n                    _active={{bg: 'orange.200'}}\r\n                    onClick={handleSubmit}>\r\n                        <AddIcon w={pxToRem(20)} h={pxToRem(20)} _active={{w:'2', h: '2'}}/>\r\n                    </Circle>\r\n                </Stack>\r\n            </FormControl>\r\n            {\r\n                listFolder.length ?\r\n                (\r\n                    <Flex direction={'column'}>\r\n                        <Box pl={pxToRem(20)}>\r\n                            <Text textDecoration={\"underline\"} mt={pxToRem(10)}>TodoFolder</Text>\r\n                        </Box>\r\n                        <Box>\r\n                        <List p={`0 ${pxToRem(5)}`}>\r\n                            {\r\n                                listFolder.map((item, idx) => <FolderItem key={idx} name={item}/>)\r\n                            }\r\n                        </List>\r\n                        </Box>\r\n                    </Flex>\r\n                ) :\r\n                null\r\n            }\r\n        </Flex>\r\n    )\r\n}","import { DeleteIcon, EditIcon } from \"@chakra-ui/icons\";\r\nimport { Checkbox, Circle, HStack, Td, Tr } from \"@chakra-ui/react\";\r\nimport { atom, useRecoilState } from \"recoil\";\r\nimport { pxToRem } from \"../utils/theme.utils\";\r\nimport { folderTodoListState } from \"./InputTodo\";\r\n\r\nexport const editTodoState = atom({\r\n  key: \"editTodoState\",\r\n  default: undefined\r\n})\r\n\r\nexport default function TableContent(props) {\r\n  const { id, todo, createdAt, isCompleted, isChecked,setCheck } = props;\r\n  const [folderTodoList, setFolderTodoList] = useRecoilState(folderTodoListState);\r\n  const [, setEditTodoState] = useRecoilState(editTodoState); \r\n  const handleDelete = () => {\r\n    setFolderTodoList([...folderTodoList.data.slice(0, id-1), ...folderTodoList.data.slice(id)])\r\n  }\r\n  return (\r\n    <Tr _hover={{bg:'green.300', borderRadius: pxToRem(10), cursor: 'pointer'}}>\r\n      <Td p={pxToRem(5)}><Checkbox isChecked={isChecked} onChange={(e) => setCheck(id-1, e.target.checked)}/></Td>\r\n      <Td p={pxToRem(5)} isNumeric>{id}</Td>\r\n      <Td p={pxToRem(5)}>{todo}</Td>\r\n      <Td p={pxToRem(5)}>{createdAt}</Td>\r\n      <Td p={pxToRem(5)}>{isCompleted ? \"Completed\" : \"Incomplete\"}</Td>\r\n      <Td p={pxToRem(5)} insetInline={'auto'}>\r\n        <HStack>\r\n          <Circle size={pxToRem(30)} _hover={{bg: 'green.400'}} onClick={() => setEditTodoState(id -1)}>\r\n            <EditIcon w={pxToRem(20)} h={pxToRem(20)} color= 'blackAlpha.500' mr={pxToRem(2.5)} _active={{w:'2', h:'2'}}/>\r\n          </Circle>\r\n          <Circle size={pxToRem(30)} _hover={{ bg: 'green.400'}} onClick={handleDelete}>\r\n            <DeleteIcon color='red.700' ml={pxToRem(2.5)} w={pxToRem(20)} h={pxToRem(20)} _active={{w:'2', h:'2'}}/>\r\n          </Circle>\r\n        </HStack>\r\n      </Td>\r\n    </Tr>\r\n  );\r\n}\r\n","import { AddIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Circle,\r\n  FormControl,\r\n  Input,\r\n  InputGroup,\r\n  InputRightElement\r\n} from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport { atom, selector, useRecoilState, useRecoilValue } from \"recoil\";\r\nimport { pxToRem } from \"../utils/theme.utils\";\r\nimport { folderState } from \"./FolderItem\";\r\nimport { editTodoState } from \"./TableContent\";\r\n\r\nexport const todoListState = atom({\r\n  key: \"todoListState\",\r\n  default: {}\r\n});\r\n\r\nexport const folderTodoListState = selector({\r\n  key: \"folderTodoListState\",\r\n  get: ({ get }) => {\r\n    const folder = get(folderState);\r\n    const todoList = get(todoListState);\r\n    return todoList[folder] || {data: []};\r\n  },\r\n  set: ({ set, get }, newValue) => {\r\n    const folder = get(folderState);\r\n    const todoList = get(todoListState);\r\n    set(todoListState, { ...todoList, [folder]: {data: newValue}});\r\n  }\r\n});\r\nexport default function InputTodo() {\r\n  const folder = useRecoilValue(folderState);\r\n  const [folderTodoList, setFolderTodoList] = useRecoilState(\r\n    folderTodoListState\r\n  );\r\n  const [editTodo, setEditTodo] = useRecoilState(editTodoState);\r\n  const [input, setInput] = React.useState(\"\");\r\n  const inputRef = React.useRef(null);\r\n  console.log(editTodo);\r\n  React.useEffect(() =>{\r\n    if(!isNaN(editTodo)) {\r\n      setInput(folderTodoList.data[editTodo].todo);\r\n      inputRef.current.focus();\r\n    }\r\n  }, [editTodo])\r\n  React.useEffect(() => {\r\n    if(folder)\r\n      inputRef.current.focus();\r\n  }, [folder])\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (!input.trim()) return;\r\n    const newValue = {\r\n      todo: input.trim(),\r\n      createdAt:\r\n        new Date().toLocaleDateString() + \" \" + new Date().toLocaleTimeString(),\r\n      isCompleted: false\r\n    };\r\n    if(!isNaN(editTodo)) {\r\n      setFolderTodoList([...folderTodoList.data.slice(0, editTodo), newValue,...folderTodoList.data.slice(editTodo+1)])\r\n      setEditTodo(undefined);\r\n    }\r\n    else\r\n    setFolderTodoList([...folderTodoList.data, newValue]);\r\n    setInput(\"\");\r\n  };\r\n  return (\r\n    <FormControl as=\"form\" onSubmit={handleSubmit} isDisabled={!folder}>\r\n      <InputGroup variant={\"filled\"} size={\"sm\"}>\r\n        <Input\r\n          placeholder=\"Enter todo job...\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          _focus={{ borderRadius: pxToRem(5) }}\r\n          ref={inputRef}\r\n        />\r\n        <InputRightElement\r\n          children={\r\n            <Circle\r\n              size={pxToRem(30)}\r\n              bg={\"orange\"}\r\n              color={\"white\"}\r\n              cursor={\"pointer\"}\r\n              _hover={{ bg: \"orange.300\" }}\r\n              _active={{ bg: \"orange.200\" }}\r\n              onClick={handleSubmit}\r\n            >\r\n              <AddIcon\r\n                w={pxToRem(20)}\r\n                h={pxToRem(20)}\r\n                _active={{ w: \"2\", h: \"2\" }}\r\n              />\r\n            </Circle>\r\n          }\r\n        />\r\n      </InputGroup>\r\n    </FormControl>\r\n  );\r\n}\r\n","import { ChevronDownIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Center,\r\n  Checkbox,\r\n  Flex,\r\n  Menu,\r\n  MenuButton,\r\n  MenuItem,\r\n  MenuList,\r\n  Table,\r\n  Tbody,\r\n  Text,\r\n  Th,\r\n  Thead,\r\n  Tr\r\n} from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\nimport { folderState } from \"../component/FolderItem\";\r\nimport { pxToRem } from \"../utils/theme.utils\";\r\nimport { folderTodoListState } from \"./InputTodo\";\r\nimport TableContent from \"./TableContent\";\r\n\r\nexport default function TodoContent() {\r\n  const folder = useRecoilValue(folderState);\r\n  const [folderTodoList, setFolderTodoList] = useRecoilState(folderTodoListState);\r\n  const [isCheckList, setCheckList] = React.useState([]);\r\n  React.useEffect(() => {\r\n    setCheckList(Array.from(folderTodoList.data, () => false))\r\n  }, [folderTodoList.data.length]);\r\n\r\n  const isAllChecked = isCheckList.every(Boolean);\r\n  const isIndeterminate = isCheckList.some(Boolean) && !isAllChecked;\r\n  const handleCheck = (id,isCheck) => {\r\n    setCheckList(prevCheckList => [...prevCheckList.slice(0,id), isCheck, ...prevCheckList.slice(id+1)]);\r\n  }\r\n  const handleChangeStatus = () => {\r\n    setFolderTodoList(folderTodoList.data.map((ele,id) =>({...ele, isCompleted: (!ele.isCompleted && isCheckList[id])})))\r\n  }\r\n  const text = !!folder\r\n    ? \"Todo folder selected. Now add todo in the folder\"\r\n    : \"No todo folder selected. Please select first or create one.\";\r\n  if (!folderTodoList.data.length)\r\n    return (\r\n      <Center p={pxToRem(20)}>\r\n        <Text>{text}</Text>\r\n      </Center>\r\n    );\r\n  return (\r\n    <Flex direction=\"column\" m={`${pxToRem(10)} ${pxToRem(20)}`} align=\"center\">\r\n      <Flex direction={'row'} wrap={'nowrap'} alignSelf={'flex-start'} justify={'space-between'} mb={pxToRem(10)}>\r\n        <Box>\r\n          <Button h={pxToRem(40)} onClick={handleChangeStatus} isDisabled={!isCheckList.some(Boolean)}>Change Status</Button>\r\n        </Box>\r\n      </Flex>\r\n        <Table variant=\"unstyled\" size={'sm'}>\r\n          <Thead borderBottom={`${pxToRem(2)} solid silver`}>\r\n            <Tr>\r\n              <Th p={pxToRem(5)}><Checkbox isChecked={isAllChecked} isIndeterminate={isIndeterminate} onChange={(e) => setCheckList(Array.from(folderTodoList.data, () => e.target.checked))}/></Th>\r\n              <Th isNumeric p={pxToRem(5)}>Id</Th>\r\n              <Th p={pxToRem(5)}>Todo</Th>\r\n              <Th p={pxToRem(5)}>Created At</Th>\r\n              <Th p={pxToRem(5)}>Status</Th>\r\n            </Tr>\r\n          </Thead>\r\n          <Tbody>\r\n            {folderTodoList.data.map(({ ...rest }, idx) => (\r\n              <TableContent {...rest} key={idx} id={idx+1} isChecked={isCheckList[idx]} setCheck={handleCheck}/>\r\n            ))}\r\n          </Tbody>\r\n        </Table>\r\n    </Flex>\r\n  );\r\n}\r\n","import { Box, Flex, Heading, Stack } from \"@chakra-ui/react\";\r\nimport { pxToRem } from \"../utils/theme.utils\";\r\nimport { ChatIcon } from \"@chakra-ui/icons\";\r\nimport TodoListFolder from \"../component/TodoListFolder\";\r\nimport TodoContent from \"../component/TodoContent\";\r\nimport InputTodo from \"../component/InputTodo\";\r\nexport default function TodosApp() {\r\n  return (\r\n    <Flex direction={\"row\"} height={\"100vh\"} overflow={\"hidden\"}>\r\n      <Box w={pxToRem(280)} bgGradient=\"linear(to-tr, orange.100, orange.200)\">\r\n        <Stack direction={\"column\"} align={\"start\"} ml={pxToRem(20)}>\r\n          <Stack direction={\"row\"} align={\"center\"}>\r\n            <ChatIcon\r\n              w={pxToRem(30)}\r\n              h={pxToRem(30)}\r\n              pos={\"relative\"}\r\n              top={pxToRem(5)}\r\n              color={\"#7928CA\"}\r\n            />\r\n            <Heading\r\n              as=\"h6\"\r\n              ml={`${pxToRem(5)} !important`}\r\n              bgGradient=\"linear(to-l, #7928CA, #FF0080)\"\r\n              bgClip={\"text\"}\r\n            >\r\n              Todo\r\n            </Heading>\r\n          </Stack>\r\n        </Stack>\r\n        <TodoListFolder />\r\n      </Box>\r\n      <Box flex={1} bgGradient=\"linear(to-t, green.200, green.500)\">\r\n        <Flex\r\n          direction={\"row\"}\r\n          wrap={\"nowrap\"}\r\n          align={\"center\"}\r\n          justify={\"center\"}\r\n          h={pxToRem(205)}\r\n          shadow={\"base\"}\r\n        >\r\n          <Box w={pxToRem(380)}>\r\n            <InputTodo />\r\n          </Box>\r\n        </Flex>\r\n        <TodoContent />\r\n      </Box>\r\n    </Flex>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport {Box, ChakraProvider, Text} from \"@chakra-ui/react\"\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { BrowserRouter, Route, Routes } from 'react-router-dom';\r\nimport TodosApp from './routes/TodosApp';\r\nimport { pxToRem } from './utils/theme.utils';\r\nimport { RecoilRoot } from 'recoil';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <RecoilRoot>\r\n    <ChakraProvider >\r\n      <BrowserRouter>\r\n      <Routes>\r\n        {/* <Route path=\"todos-app2.0\" element={<App/>}/> */}\r\n        <Route path=\"todos-app2.0\" element={<TodosApp/>}/>\r\n        <Route path=\"*\" element={<Box as=\"main\" p={pxToRem(5)}><Text>There's nothing here</Text></Box>}/>\r\n      </Routes>\r\n    </BrowserRouter>\r\n    </ChakraProvider>\r\n    </RecoilRoot>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}